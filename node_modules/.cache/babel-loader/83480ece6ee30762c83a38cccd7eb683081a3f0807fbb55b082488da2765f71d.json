{"ast":null,"code":"import * as testUtils from 'react-dom/test-utils';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as ReactDOMClient from 'react-dom/client';\nimport { fireEvent as fireEvent$1, configure, prettyDOM, getQueriesForElement } from '@testing-library/dom';\nexport * from '@testing-library/dom';\nconst domAct = testUtils.act;\nfunction getGlobalThis() {\n  /* istanbul ignore else */\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  /* istanbul ignore next */\n\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  /* istanbul ignore next */\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  /* istanbul ignore next */\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  /* istanbul ignore next */\n\n  throw new Error('unable to locate global object');\n}\nfunction setIsReactActEnvironment(isReactActEnvironment) {\n  getGlobalThis().IS_REACT_ACT_ENVIRONMENT = isReactActEnvironment;\n}\nfunction getIsReactActEnvironment() {\n  return getGlobalThis().IS_REACT_ACT_ENVIRONMENT;\n}\nfunction withGlobalActEnvironment(actImplementation) {\n  return callback => {\n    const previousActEnvironment = getIsReactActEnvironment();\n    setIsReactActEnvironment(true);\n    try {\n      // The return value of `act` is always a thenable.\n      let callbackNeedsToBeAwaited = false;\n      const actResult = actImplementation(() => {\n        const result = callback();\n        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {\n          callbackNeedsToBeAwaited = true;\n        }\n        return result;\n      });\n      if (callbackNeedsToBeAwaited) {\n        const thenable = actResult;\n        return {\n          then: (resolve, reject) => {\n            thenable.then(returnValue => {\n              setIsReactActEnvironment(previousActEnvironment);\n              resolve(returnValue);\n            }, error => {\n              setIsReactActEnvironment(previousActEnvironment);\n              reject(error);\n            });\n          }\n        };\n      } else {\n        setIsReactActEnvironment(previousActEnvironment);\n        return actResult;\n      }\n    } catch (error) {\n      // Can't be a `finally {}` block since we don't know if we have to immediately restore IS_REACT_ACT_ENVIRONMENT\n      // or if we have to await the callback first.\n      setIsReactActEnvironment(previousActEnvironment);\n      throw error;\n    }\n  };\n}\nconst act = withGlobalActEnvironment(domAct);\n/* eslint no-console:0 */\n\n// dom-testing-library's version of fireEvent. The reason\n// we make this distinction however is because we have\n// a few extra events that work a bit differently\n\nconst fireEvent = function () {\n  return fireEvent$1(...arguments);\n};\nObject.keys(fireEvent$1).forEach(key => {\n  fireEvent[key] = function () {\n    return fireEvent$1[key](...arguments);\n  };\n}); // React event system tracks native mouseOver/mouseOut events for\n// running onMouseEnter/onMouseLeave handlers\n// @link https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/events/EnterLeaveEventPlugin.js#L24-L31\n\nconst mouseEnter = fireEvent.mouseEnter;\nconst mouseLeave = fireEvent.mouseLeave;\nfireEvent.mouseEnter = function () {\n  mouseEnter(...arguments);\n  return fireEvent.mouseOver(...arguments);\n};\nfireEvent.mouseLeave = function () {\n  mouseLeave(...arguments);\n  return fireEvent.mouseOut(...arguments);\n};\nconst pointerEnter = fireEvent.pointerEnter;\nconst pointerLeave = fireEvent.pointerLeave;\nfireEvent.pointerEnter = function () {\n  pointerEnter(...arguments);\n  return fireEvent.pointerOver(...arguments);\n};\nfireEvent.pointerLeave = function () {\n  pointerLeave(...arguments);\n  return fireEvent.pointerOut(...arguments);\n};\nconst select = fireEvent.select;\nfireEvent.select = (node, init) => {\n  select(node, init); // React tracks this event only on focused inputs\n\n  node.focus(); // React creates this event when one of the following native events happens\n  // - contextMenu\n  // - mouseUp\n  // - dragEnd\n  // - keyUp\n  // - keyDown\n  // so we can use any here\n  // @link https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/events/SelectEventPlugin.js#L203-L224\n\n  fireEvent.keyUp(node, init);\n}; // React event system tracks native focusout/focusin events for\n// running blur/focus handlers\n// @link https://github.com/facebook/react/pull/19186\n\nconst blur = fireEvent.blur;\nconst focus = fireEvent.focus;\nfireEvent.blur = function () {\n  fireEvent.focusOut(...arguments);\n  return blur(...arguments);\n};\nfireEvent.focus = function () {\n  fireEvent.focusIn(...arguments);\n  return focus(...arguments);\n};\nconfigure({\n  unstable_advanceTimersWrapper: cb => {\n    return act(cb);\n  },\n  // We just want to run `waitFor` without IS_REACT_ACT_ENVIRONMENT\n  // But that's not necessarily how `asyncWrapper` is used since it's a public method.\n  // Let's just hope nobody else is using it.\n  asyncWrapper: async cb => {\n    const previousActEnvironment = getIsReactActEnvironment();\n    setIsReactActEnvironment(false);\n    try {\n      return await cb();\n    } finally {\n      setIsReactActEnvironment(previousActEnvironment);\n    }\n  },\n  eventWrapper: cb => {\n    let result;\n    act(() => {\n      result = cb();\n    });\n    return result;\n  }\n}); // Ideally we'd just use a WeakMap where containers are keys and roots are values.\n// We use two variables so that we can bail out in constant time when we render with a new container (most common use case)\n\n/**\n * @type {Set<import('react-dom').Container>}\n */\n\nconst mountedContainers = new Set();\n/**\n * @type Array<{container: import('react-dom').Container, root: ReturnType<typeof createConcurrentRoot>}>\n */\n\nconst mountedRootEntries = [];\nfunction createConcurrentRoot(container, _ref) {\n  let {\n    hydrate,\n    ui,\n    wrapper: WrapperComponent\n  } = _ref;\n  let root;\n  if (hydrate) {\n    act(() => {\n      root = ReactDOMClient.hydrateRoot(container, WrapperComponent ? /*#__PURE__*/React.createElement(WrapperComponent, null, ui) : ui);\n    });\n  } else {\n    root = ReactDOMClient.createRoot(container);\n  }\n  return {\n    hydrate() {\n      /* istanbul ignore if */\n      if (!hydrate) {\n        throw new Error('Attempted to hydrate a non-hydrateable root. This is a bug in `@testing-library/react`.');\n      } // Nothing to do since hydration happens when creating the root object.\n    },\n    render(element) {\n      root.render(element);\n    },\n    unmount() {\n      root.unmount();\n    }\n  };\n}\nfunction createLegacyRoot(container) {\n  return {\n    hydrate(element) {\n      ReactDOM.hydrate(element, container);\n    },\n    render(element) {\n      ReactDOM.render(element, container);\n    },\n    unmount() {\n      ReactDOM.unmountComponentAtNode(container);\n    }\n  };\n}\nfunction renderRoot(ui, _ref2) {\n  let {\n    baseElement,\n    container,\n    hydrate,\n    queries,\n    root,\n    wrapper: WrapperComponent\n  } = _ref2;\n  const wrapUiIfNeeded = innerElement => WrapperComponent ? /*#__PURE__*/React.createElement(WrapperComponent, null, innerElement) : innerElement;\n  act(() => {\n    if (hydrate) {\n      root.hydrate(wrapUiIfNeeded(ui), container);\n    } else {\n      root.render(wrapUiIfNeeded(ui), container);\n    }\n  });\n  return {\n    container,\n    baseElement,\n    debug: function (el, maxLength, options) {\n      if (el === void 0) {\n        el = baseElement;\n      }\n      return Array.isArray(el) ?\n      // eslint-disable-next-line no-console\n      el.forEach(e => console.log(prettyDOM(e, maxLength, options))) :\n      // eslint-disable-next-line no-console,\n      console.log(prettyDOM(el, maxLength, options));\n    },\n    unmount: () => {\n      act(() => {\n        root.unmount();\n      });\n    },\n    rerender: rerenderUi => {\n      renderRoot(wrapUiIfNeeded(rerenderUi), {\n        container,\n        baseElement,\n        root\n      }); // Intentionally do not return anything to avoid unnecessarily complicating the API.\n      // folks can use all the same utilities we return in the first place that are bound to the container\n    },\n    asFragment: () => {\n      /* istanbul ignore else (old jsdom limitation) */\n      if (typeof document.createRange === 'function') {\n        return document.createRange().createContextualFragment(container.innerHTML);\n      } else {\n        const template = document.createElement('template');\n        template.innerHTML = container.innerHTML;\n        return template.content;\n      }\n    },\n    ...getQueriesForElement(baseElement, queries)\n  };\n}\nfunction render(ui, _temp) {\n  let {\n    container,\n    baseElement = container,\n    legacyRoot = false,\n    queries,\n    hydrate = false,\n    wrapper\n  } = _temp === void 0 ? {} : _temp;\n  if (!baseElement) {\n    // default to document.body instead of documentElement to avoid output of potentially-large\n    // head elements (such as JSS style blocks) in debug output\n    baseElement = document.body;\n  }\n  if (!container) {\n    container = baseElement.appendChild(document.createElement('div'));\n  }\n  let root; // eslint-disable-next-line no-negated-condition -- we want to map the evolution of this over time. The root is created first. Only later is it re-used so we don't want to read the case that happens later first.\n\n  if (!mountedContainers.has(container)) {\n    const createRootImpl = legacyRoot ? createLegacyRoot : createConcurrentRoot;\n    root = createRootImpl(container, {\n      hydrate,\n      ui,\n      wrapper\n    });\n    mountedRootEntries.push({\n      container,\n      root\n    }); // we'll add it to the mounted containers regardless of whether it's actually\n    // added to document.body so the cleanup method works regardless of whether\n    // they're passing us a custom container or not.\n\n    mountedContainers.add(container);\n  } else {\n    mountedRootEntries.forEach(rootEntry => {\n      // Else is unreachable since `mountedContainers` has the `container`.\n      // Only reachable if one would accidentally add the container to `mountedContainers` but not the root to `mountedRootEntries`\n\n      /* istanbul ignore else */\n      if (rootEntry.container === container) {\n        root = rootEntry.root;\n      }\n    });\n  }\n  return renderRoot(ui, {\n    container,\n    baseElement,\n    queries,\n    hydrate,\n    wrapper,\n    root\n  });\n}\nfunction cleanup() {\n  mountedRootEntries.forEach(_ref3 => {\n    let {\n      root,\n      container\n    } = _ref3;\n    act(() => {\n      root.unmount();\n    });\n    if (container.parentNode === document.body) {\n      document.body.removeChild(container);\n    }\n  });\n  mountedRootEntries.length = 0;\n  mountedContainers.clear();\n}\nfunction renderHook(renderCallback, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    initialProps,\n    ...renderOptions\n  } = options;\n  const result = /*#__PURE__*/React.createRef();\n  function TestComponent(_ref4) {\n    let {\n      renderCallbackProps\n    } = _ref4;\n    const pendingResult = renderCallback(renderCallbackProps);\n    React.useEffect(() => {\n      result.current = pendingResult;\n    });\n    return null;\n  }\n  const {\n    rerender: baseRerender,\n    unmount\n  } = render( /*#__PURE__*/React.createElement(TestComponent, {\n    renderCallbackProps: initialProps\n  }), renderOptions);\n  function rerender(rerenderCallbackProps) {\n    return baseRerender( /*#__PURE__*/React.createElement(TestComponent, {\n      renderCallbackProps: rerenderCallbackProps\n    }));\n  }\n  return {\n    result,\n    rerender,\n    unmount\n  };\n} // just re-export everything from dom-testing-library\n/* eslint func-name-matching:0 */\n\nvar _process$env;\n// or teardown then we'll automatically run cleanup afterEach test\n// this ensures that tests run in isolation from each other\n// if you don't like this then either import the `pure` module\n// or set the RTL_SKIP_AUTO_CLEANUP env variable to 'true'.\n\nif (typeof process === 'undefined' || !((_process$env = process.env) != null && _process$env.RTL_SKIP_AUTO_CLEANUP)) {\n  // ignore teardown() in code coverage because Jest does not support it\n\n  /* istanbul ignore else */\n  if (typeof afterEach === 'function') {\n    afterEach(() => {\n      cleanup();\n    });\n  } else if (typeof teardown === 'function') {\n    // Block is guarded by `typeof` check.\n    // eslint does not support `typeof` guards.\n    // eslint-disable-next-line no-undef\n    teardown(() => {\n      cleanup();\n    });\n  } // No test setup with other test runners available\n\n  /* istanbul ignore else */\n\n  if (typeof beforeAll === 'function' && typeof afterAll === 'function') {\n    // This matches the behavior of React < 18.\n    let previousIsReactActEnvironment = getIsReactActEnvironment();\n    beforeAll(() => {\n      previousIsReactActEnvironment = getIsReactActEnvironment();\n      setIsReactActEnvironment(true);\n    });\n    afterAll(() => {\n      setIsReactActEnvironment(previousIsReactActEnvironment);\n    });\n  }\n}\nexport { act, cleanup, fireEvent, render, renderHook };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}