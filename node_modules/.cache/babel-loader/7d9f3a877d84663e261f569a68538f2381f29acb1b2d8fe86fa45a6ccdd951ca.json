{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBound = require('call-bind/callBound');\nvar $WeakSet = GetIntrinsic('%WeakSet%', true);\nvar $setHas = callBound('WeakSet.prototype.has', true);\nif ($setHas) {\n  var $mapHas = callBound('WeakMap.prototype.has', true);\n\n  /** @type {import('.')} */\n  module.exports = function isWeakSet(x) {\n    if (!x || typeof x !== 'object') {\n      return false;\n    }\n    try {\n      $setHas(x, $setHas);\n      if ($mapHas) {\n        try {\n          $mapHas(x, $mapHas);\n        } catch (e) {\n          return true;\n        }\n      }\n      // @ts-expect-error TS can't figure out that $WeakSet is always truthy here\n      return x instanceof $WeakSet; // core-js workaround, pre-v3\n    } catch (e) {}\n    return false;\n  };\n} else {\n  /** @type {import('.')} */\n  // eslint-disable-next-line no-unused-vars\n  module.exports = function isWeakSet(x) {\n    // `WeakSet` does not exist, or does not have a `has` method\n    return false;\n  };\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}